# https://docs.gitlab.com/ee/ci/yaml/index.html#switch-between-branch-pipelines-and-merge-request-pipelines
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS || $CI_COMMIT_TAG
      when: never
    - when: always

# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker
variables:
  # When you use the dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  FF_NETWORK_PER_BUILD: 1

.containers: &containers
  - api
  - scheduler
  - authentication
  - backupninja
  - core_worker
  - db
  - engine
  - grafana
  - guac
  - rdpgw
  - hypervisor
  - portal
  - squid
  - static
  - stats-go
  - stats-rethinkdb
  - storage
  - webapp
  - websockify

default:
  cache: &global_cache
    - key:
        files:
          - go.mod
          - go.sum
      paths:
        - /go/pkg/mod
    - key:
        files:
          - frontend/package.json
          - frontend/yarn.lock
      paths:
        - frontend/node_modules
    - key:
        files:
          - e2e/package.json
          - e2e/yarn.lock
      paths:
        - e2e/node_modules

stages:
 - lint
 - docker-image-codegen
 - gen
 - unit-test
 - version
 - docker-compose
 - docker-images
 - test
 - docker-registry
 - release

commit-lint:
  stage: lint
  image: node
  before_script:
    - npm install -g @commitlint/config-conventional
  script:
    - git fetch https://gitlab.com/isard/isardvdi.git main
    - npx commitlint -x "@commitlint/config-conventional" --from=$(git merge-base HEAD FETCH_HEAD)

check-python:
  stage: lint
  image: python:3.10-bullseye
  script:
    - pip install isort black==22.12.0
    - isort --check .
    - black --check .

check-frontend:
  stage: lint
  image: node:18
  script:
    - cd frontend
    - yarn
    - yarn lint --no-fix --max-warnings 0

check-protobuf:
  stage: lint
  image:
    name: bufbuild/buf:1.15.0
    entrypoint: [""]
  script:
    - buf lint
    - buf breaking --against https://gitlab.com/isard/isardvdi.git

docker-image-codegen:
  image: docker:latest
  stage: docker-image-codegen
  services:
  - name: "docker:dind-rootless"
  parallel:
    matrix:
      - DOCKERFILE: docker/codegen/Dockerfile
        IMAGE: codegen
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f $DOCKERFILE --cache-from registry.gitlab.com/isard/isardvdi/$IMAGE:main --cache-from registry.gitlab.com/isard/isardvdi/$IMAGE:$CI_COMMIT_REF_SLUG --cache-to type=inline -t $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_REF_SLUG .
    - docker tag $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/$IMAGE:git-$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/$IMAGE:git-$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_REF_SLUG

gen-protobuf:
  stage: gen
  image: docker:latest
  services:
    - name: "docker:dind-rootless"
  before_script:
    - until docker info; do sleep 1; done
  script:
    - docker run -u $(id -u) -v "$(pwd):/build" "$CI_REGISTRY_IMAGE/codegen:git-$CI_COMMIT_SHORT_SHA"
  artifacts:
    paths:
      - pkg/gen

unit-test-go:
  stage: unit-test
  image: golang:1.20
  before_script:
    - apt-get update && apt-get install -y libvirt-dev
    - go install github.com/boumenot/gocover-cobertura@latest
  script:
    - export PATH=$PATH:~/go/bin
    - go test -v -race ./... -coverprofile coverage.out -covermode atomic
    - go tool cover -func coverage.out
    - gocover-cobertura < coverage.out > coverage.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: /total:\s+\(statements\)\s+\d+.\d+%/

version:
  stage: version
  image: node
  rules:
    # semantic-release checks repository write access and we cannot use
    # GITLAB_TOKEN in unprotected branches due to security reasons.
    # https://github.com/semantic-release/semantic-release/issues/2207
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - npm install -g semantic-release @semantic-release/exec conventional-changelog-conventionalcommits
    - cp releaserc.version.yml .releaserc.yml
  script:
    - semantic-release --dry-run --branches $CI_COMMIT_REF_NAME
  artifacts:
    paths:
      - .VERSION

changelog-preview:
  # This is a workarround to show changelog preview without semantic-release
  # see comment in job "version".
  stage: version
  image: node
  before_script:
    - npm install -g conventional-changelog-cli conventional-changelog-conventionalcommits
  script:
    - conventional-changelog -p conventionalcommits -o CHANGELOG.md
    - cat CHANGELOG.md
  artifacts:
    paths:
      - CHANGELOG.md

docker-compose-demo:
  stage: docker-compose
  image: docker:latest
  services:
    - name: "docker:dind-rootless"
  before_script:
    - apk add bash git
    # Use docker compose < 1.27 to avoid depends_on issue
    # https://github.com/isard-vdi/isard/issues/390
    - apk info -q --depends docker-compose | xargs apk add
    - apk add py3-pip
    - pip install "Cython<3.0.0" pyyaml==5.3.1  docker-compose~=1.26.0
  script:
    - test "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" -a ! -e ".VERSION" && exit 0
    - cp isardvdi.cfg.example isardvdi.cfg
    - echo "DOCKER_IMAGE_PREFIX=${CI_REGISTRY_IMAGE}/" >> isardvdi.cfg
    - echo "DOCKER_IMAGE_TAG=$CI_COMMIT_REF_SLUG" >> isardvdi.cfg
    - SKIP_CHECK_DOCKER_COMPOSE_VERSION=true CODEGEN=false ./build.sh
  artifacts:
    paths:
      - docker-compose*.yml

docker-compose-build:
  stage: docker-compose
  image: docker:latest
  services:
    - name: "docker:dind-rootless"
  before_script:
    - apk add bash git docker-compose yq
  script:
    - cp isardvdi.cfg.example isardvdi.build.cfg
    - echo "DOCKER_IMAGE_PREFIX=${CI_REGISTRY_IMAGE}/" >> isardvdi.build.cfg
    - echo "DOCKER_IMAGE_TAG=$CI_COMMIT_REF_SLUG" >> isardvdi.build.cfg
    - echo "USAGE=build" >> isardvdi.build.cfg
    - cp isardvdi.build.cfg isardvdi.infrastructure_build.cfg
    - echo "INFRASTRUCTURE_MANAGEMENT=true" >> isardvdi.infrastructure_build.cfg
    - cp isardvdi.build.cfg isardvdi.video_standalone_build.cfg
    - echo "FLAVOUR=video-standalone" >> isardvdi.video_standalone_build.cfg
    - cp isardvdi.build.cfg isardvdi.monitor_build.cfg
    - echo "FLAVOUR=monitor" >> isardvdi.monitor_build.cfg
    - cp isardvdi.build.cfg isardvdi.check_build.cfg
    - echo "FLAVOUR=check" >> isardvdi.check_build.cfg
    - cp isardvdi.build.cfg isardvdi.nextcloud_build.cfg
    - echo "FLAVOUR=nextcloud" >> isardvdi.nextcloud_build.cfg
    - BACKUP_DB_ENABLED=true CODEGEN=false ./build.sh
    - |-
      for file in docker-compose*.yml; do yq -i '.services |= map_values(.build.cache_from = [ "registry.gitlab.com/isard/isardvdi/" + (.container_name | sub("isard-", "")) + ":main", "registry.gitlab.com/isard/isardvdi/" + (.container_name | sub("isard-", "")) + ":" + env(CI_COMMIT_REF_SLUG) ]) |= map_values(.build.cache_to = [ "type=inline" ])' $file; done
  artifacts:
    paths:
      - docker-compose*.yml

docker-image:
  image: docker:latest
  stage: docker-images
  services:
    - name: "docker:dind-rootless"
  variables:
    DOCKER_COMPOSE: >-
      build
      infrastructure_build
      video_standalone_build
      monitor_build
      check_build
      nextcloud_build
    build: >-
      api
      scheduler
      authentication
      backupninja
      core_worker
      db
      engine
      grafana
      guac
      rdpgw
      hypervisor
      portal
      squid
      static
      stats-go
      stats-rethinkdb
      storage
      vpn
      webapp
      websockify
    infrastructure_build: >-
      orchestrator
    video_standalone_build: >-
      video
    monitor_build: >-
      monitor-proxy
    check_build: >-
      check
      check-client
    nextcloud_build: >-
      nc-proxy
      nc-app
  before_script:
    - apk add git docker-compose bash
    - until docker info; do sleep 1; done
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - git submodule update --init --recursive --remote
    - docker-compose -f docker-compose.build.yml build isard-rdpgw
    - docker tag $CI_REGISTRY_IMAGE/rdpgw:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/rdpgw:git-$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/rdpgw:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE/rdpgw:git-$CI_COMMIT_SHORT_SHA
    - |
      bash -c 'for FILE in $DOCKER_COMPOSE; do
        for IMAGE in ${!FILE}; do
          docker-compose -f docker-compose.$FILE.yml build isard-$IMAGE
          docker tag $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/$IMAGE:git-$CI_COMMIT_SHORT_SHA
          docker push $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_REF_SLUG
          docker push $CI_REGISTRY_IMAGE/$IMAGE:git-$CI_COMMIT_SHORT_SHA
        done
      done'

test-e2e:
  stage: test
  variables:
    DOCKER_TLS_CERTDIR: "/certs-root"
  services:
    - name: "docker:dind"
      variables:
        DOCKER_TLS_CERTDIR: "/certs-root"
      alias: docker
  image: "docker:latest"
  before_script:
    - apk add git docker-compose
    - until docker info; do sleep 1; done
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - cp isardvdi.cfg.example isardvdi.e2e.cfg
    - echo "USAGE=test" >> isardvdi.e2e.cfg
    - echo "DOMAIN=host.docker.internal" >> isardvdi.e2e.cfg
    - echo "DOCKER_IMAGE_PREFIX=${CI_REGISTRY_IMAGE}/" >> isardvdi.e2e.cfg
    - echo "DOCKER_IMAGE_TAG=git-$CI_COMMIT_SHORT_SHA" >> isardvdi.e2e.cfg
    - CODEGEN=false ./build.sh
    - docker compose -f docker-compose.e2e.yml pull
    - docker compose -f docker-compose.e2e.yml up -d
  script:
    - cd frontend
    - docker run --rm -w "/frontend" -v "$PWD:/frontend" node:18 yarn
    - export PORTAL="$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' isard-portal | tr -d '\n')"
    - export NETWORK="$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.NetworkID}}{{end}}' isard-portal | tr -d '\n')"
    - docker run --rm --ipc=host -w "/frontend" -v "$PWD:/frontend" -e "DOCKER=true" -e "CI=true" --add-host="host.docker.internal:$PORTAL" --network="$NETWORK" mcr.microsoft.com/playwright:v1.36.0-jammy yarn playwright test
  artifacts:
    when: always
    paths:
      - frontend/test-results
      - frontend/playwright-report

# test-selenium:
#   stage: test
#   image: docker:latest
#   services:
#     - docker:dind
#   script:
#     - apk add bash git docker-compose
#     - cp isardvdi.cfg.example isardvdi.cfg
#     - echo "DOCKER_IMAGE_PREFIX=${CI_REGISTRY_IMAGE}/" >> isardvdi.cfg
#     - echo "DOCKER_IMAGE_TAG=git-$CI_COMMIT_SHORT_SHA" >> isardvdi.cfg
#     - ./build.sh
#     - docker-compose -f docker-compose.yml -f testing/docker-compose.yml up -d
#     - docker-compose -f docker-compose.yml -f testing/docker-compose.yml exec -T isard-testing pytest testing
# 
# test-cypress:
#   stage: test
#   image: docker:latest
#   services:
#     - docker:dind
#   script:
#     - apk add bash git docker-compose
#     - cp isardvdi.cfg.example isardvdi.cfg
#     - echo "DOCKER_IMAGE_PREFIX=${CI_REGISTRY_IMAGE}/" >> isardvdi.cfg
#     - echo "DOCKER_IMAGE_TAG=git-$CI_COMMIT_SHORT_SHA" >> isardvdi.cfg
#     - echo "USAGE=test" >> isardvdi.cfg
#     - ./build.sh
#     - docker-compose --profile test pull
#     - docker-compose up -d
#     - docker-compose run -v $(pwd)/captures:/usr/local/src/isard-frontend/tests/e2e/captures isard-cypress
#   artifacts:
#     when: always
#     paths:
#       - captures/videos/**/*.mp4
#       - captures/screenshots/**/*.png

docker-tag:
  stage: docker-registry
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  parallel:
    matrix:
      - IMAGE:
          *containers
      - IMAGE:
          - codegen
          - check
          - check-client
          - vpn
          - orchestrator
          - video
          - monitor-proxy
          - nc-proxy
          - nc-app
  script:
    - test "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" -a ! -e ".VERSION" && exit 0
    - crane auth login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - crane tag $CI_REGISTRY_IMAGE/$IMAGE:git-$CI_COMMIT_SHORT_SHA $CI_COMMIT_REF_SLUG
    - test ! -e ".VERSION" && exit 0
    - crane tag $CI_REGISTRY_IMAGE/$IMAGE:git-$CI_COMMIT_SHORT_SHA v$(cat .VERSION | tr '.' '-')

release:
  stage: release
  image: node
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - test ! -e ".VERSION" && exit 0
    - 'sed -i "s/^\(\s*DOCKER_IMAGE_TAG: \)$CI_DEFAULT_BRANCH$/\1v$(cat .VERSION | tr "." "-")/" docker-compose*.yml'
    - npm install -g semantic-release @semantic-release/gitlab conventional-changelog-conventionalcommits
    - cp releaserc.release.yml .releaserc.yml
    - semantic-release --branches $CI_DEFAULT_BRANCH
