# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: operations/v1/operations.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class OperationState(betterproto.Enum):
    """OperationState are the different states that a operation can be"""

    OPERATION_STATE_UNSPECIFIED = 0
    """default zero value"""

    OPERATION_STATE_SCHEDULED = 1
    """
    OPERATION_STATE_SCHEDULED means that the operation is queued, and it's
    going to be ran when it's its time
    """

    OPERATION_STATE_ACTIVE = 2
    """OPERATION_STATE_ACTIVE means that the operation is being executed"""

    OPERATION_STATE_FAILED = 3
    """OPERATION_STATE_FAILED means the operation has failed"""

    OPERATION_STATE_COMPLETED = 4
    """
    OPERATION_STATE_COMPLETED means the operation has finished successfully
    """


class HypervisorCapabilities(betterproto.Enum):
    """
    HypervisorCapabilites are the different capabilites that a hypervisor can
    have
    """

    HYPERVISOR_CAPABILITIES_UNSPECIFIED = 0
    """default zero value"""

    HYPERVISOR_CAPABILITIES_STORAGE = 1
    """
    HYPERVISOR_CAPABILITIES_STORAGE means the hypervisor has access to the
    shared storage pool
    """

    HYPERVISOR_CAPABILITIES_GPU = 2
    """HYPERVISOR_CAPABILITIES_GPU means the hypervisor has access to a GPU"""


class HypervisorState(betterproto.Enum):
    """
    HypervisorState are the different states that a operations hypervisor can
    be
    """

    HYPERVISOR_STATE_UNSPECIFIED = 0
    """default zero value"""

    HYPERVISOR_STATE_UNKNOWN = 1
    """HYPERVISOR_STATE_UNKNOWN"""

    HYPERVISOR_STATE_AVAILABLE_TO_CREATE = 2
    """
    HYPERVISOR_STATE_AVAILABLE_TO_CREATE means the hypervisor can be created
    """

    HYPERVISOR_STATE_AVAILABLE_TO_DESTROY = 3
    """
    HYPERVISOR_STATE_AVAILABLE_TO_DESTROY means the hypervisor can be destroyed
    """


@dataclass(eq=False, repr=False)
class ListHypervisorsRequest(betterproto.Message):
    """ListHypervisorsRequest is the request for the ListHypervisors method"""

    pass


@dataclass(eq=False, repr=False)
class ListHypervisorsResponse(betterproto.Message):
    """
    ListHypervisorsResponse is the response for the ListHypervisors method
    """

    hypervisors: List["ListHypervisorsResponseHypervisor"] = betterproto.message_field(
        1
    )
    """hypervisors contains all the hypervisors in the operations service"""


@dataclass(eq=False, repr=False)
class ListHypervisorsResponseHypervisor(betterproto.Message):
    """
    ListHypervisorsResponseHypervisor is each hypervisor in the response of the
    ListHypervisors method
    """

    id: str = betterproto.string_field(1)
    """id is the ID of the hypervisor"""

    cpu: int = betterproto.int32_field(2)
    """cpu is the number of CPU threads that the machine has"""

    ram: int = betterproto.int32_field(3)
    """ram is the number of RAM that the machine has. It's in MB"""

    capabilities: List["HypervisorCapabilities"] = betterproto.enum_field(4)
    """capabilities are the capabilities that the hypervisor has"""

    state: "HypervisorState" = betterproto.enum_field(5)
    """state is the state of the hypervisor"""


@dataclass(eq=False, repr=False)
class CreateHypervisorRequest(betterproto.Message):
    """
    CreateHypervisorRequest is the request for the CreateHypervisor method
    """

    id: str = betterproto.string_field(1)
    """id is the ID of the hypervisor"""


@dataclass(eq=False, repr=False)
class CreateHypervisorResponse(betterproto.Message):
    """
    CreateHypervisorResponse is the response for the CreateHypervisor method
    """

    state: "OperationState" = betterproto.enum_field(1)
    """state is the state of the operation"""

    msg: str = betterproto.string_field(2)
    """msg contains info related with the operation"""


@dataclass(eq=False, repr=False)
class DestroyHypervisorRequest(betterproto.Message):
    """
    DestroyHypervisorRequest is the request for the DestroyHypervisor method
    """

    id: str = betterproto.string_field(1)
    """id is the ID of the hypervisor"""


@dataclass(eq=False, repr=False)
class DestroyHypervisorResponse(betterproto.Message):
    """
    DestroyHypervisorResponse is the response for the DestroyHypervisor method
    """

    state: "OperationState" = betterproto.enum_field(1)
    """state is the state of the operation"""

    msg: str = betterproto.string_field(2)
    """msg contains info related with the operation"""


@dataclass(eq=False, repr=False)
class ExpandStorageRequest(betterproto.Message):
    """ExpandStorageRequest is the request for the ExpandStorage method"""

    min_bytes: int = betterproto.int32_field(1)
    """
    min_bytes is the minimum number of bytes that the storage needs to be
    expanded
    """


@dataclass(eq=False, repr=False)
class ExpandStorageResponse(betterproto.Message):
    """ExpandStorageResponse is the response for the ExpandStorage method"""

    state: "OperationState" = betterproto.enum_field(1)
    """state is the state of the operation"""

    msg: str = betterproto.string_field(2)
    """msg contains info related with the operation"""


@dataclass(eq=False, repr=False)
class ShrinkStorageRequest(betterproto.Message):
    """ShrinkStorageRequest is the request for the ShrinkStorage method"""

    max_bytes: int = betterproto.int32_field(1)
    """
    max_bytes is the maximum number of bytes that the storage needs to be
    shrink
    """


@dataclass(eq=False, repr=False)
class ShrinkStorageResponse(betterproto.Message):
    """ShrinkStorageResponse is the response for the ShrinkStorage method"""

    state: "OperationState" = betterproto.enum_field(1)
    """state is the state of the operation"""

    msg: str = betterproto.string_field(2)
    """msg contains info related with the operation"""


@dataclass(eq=False, repr=False)
class CreateBackupRequest(betterproto.Message):
    """CreateBackupRequest is the request for the CreateBackup method"""

    pass


@dataclass(eq=False, repr=False)
class CreateBackupResponse(betterproto.Message):
    """CreateBackupResponse is the response for the CreateBackup method"""

    state: "OperationState" = betterproto.enum_field(1)
    """state is the state of the operation"""

    msg: str = betterproto.string_field(2)
    """msg contains info related with the operation"""


class OperationsServiceStub(betterproto.ServiceStub):
    async def list_hypervisors(
        self,
        list_hypervisors_request: "ListHypervisorsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListHypervisorsResponse":
        return await self._unary_unary(
            "/operations.v1.OperationsService/ListHypervisors",
            list_hypervisors_request,
            ListHypervisorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_hypervisor(
        self,
        create_hypervisor_request: "CreateHypervisorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["CreateHypervisorResponse"]:
        async for response in self._unary_stream(
            "/operations.v1.OperationsService/CreateHypervisor",
            create_hypervisor_request,
            CreateHypervisorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def destroy_hypervisor(
        self,
        destroy_hypervisor_request: "DestroyHypervisorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["DestroyHypervisorResponse"]:
        async for response in self._unary_stream(
            "/operations.v1.OperationsService/DestroyHypervisor",
            destroy_hypervisor_request,
            DestroyHypervisorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def expand_storage(
        self,
        expand_storage_request: "ExpandStorageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["ExpandStorageResponse"]:
        async for response in self._unary_stream(
            "/operations.v1.OperationsService/ExpandStorage",
            expand_storage_request,
            ExpandStorageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def shrink_storage(
        self,
        shrink_storage_request: "ShrinkStorageRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["ShrinkStorageResponse"]:
        async for response in self._unary_stream(
            "/operations.v1.OperationsService/ShrinkStorage",
            shrink_storage_request,
            ShrinkStorageResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def create_backup(
        self,
        create_backup_request: "CreateBackupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["CreateBackupResponse"]:
        async for response in self._unary_stream(
            "/operations.v1.OperationsService/CreateBackup",
            create_backup_request,
            CreateBackupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class OperationsServiceBase(ServiceBase):
    async def list_hypervisors(
        self, list_hypervisors_request: "ListHypervisorsRequest"
    ) -> "ListHypervisorsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_hypervisor(
        self, create_hypervisor_request: "CreateHypervisorRequest"
    ) -> AsyncIterator["CreateHypervisorResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def destroy_hypervisor(
        self, destroy_hypervisor_request: "DestroyHypervisorRequest"
    ) -> AsyncIterator["DestroyHypervisorResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def expand_storage(
        self, expand_storage_request: "ExpandStorageRequest"
    ) -> AsyncIterator["ExpandStorageResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def shrink_storage(
        self, shrink_storage_request: "ShrinkStorageRequest"
    ) -> AsyncIterator["ShrinkStorageResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_backup(
        self, create_backup_request: "CreateBackupRequest"
    ) -> AsyncIterator["CreateBackupResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_hypervisors(
        self,
        stream: "grpclib.server.Stream[ListHypervisorsRequest, ListHypervisorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_hypervisors(request)
        await stream.send_message(response)

    async def __rpc_create_hypervisor(
        self,
        stream: "grpclib.server.Stream[CreateHypervisorRequest, CreateHypervisorResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.create_hypervisor,
            stream,
            request,
        )

    async def __rpc_destroy_hypervisor(
        self,
        stream: "grpclib.server.Stream[DestroyHypervisorRequest, DestroyHypervisorResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.destroy_hypervisor,
            stream,
            request,
        )

    async def __rpc_expand_storage(
        self,
        stream: "grpclib.server.Stream[ExpandStorageRequest, ExpandStorageResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.expand_storage,
            stream,
            request,
        )

    async def __rpc_shrink_storage(
        self,
        stream: "grpclib.server.Stream[ShrinkStorageRequest, ShrinkStorageResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.shrink_storage,
            stream,
            request,
        )

    async def __rpc_create_backup(
        self, stream: "grpclib.server.Stream[CreateBackupRequest, CreateBackupResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.create_backup,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/operations.v1.OperationsService/ListHypervisors": grpclib.const.Handler(
                self.__rpc_list_hypervisors,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListHypervisorsRequest,
                ListHypervisorsResponse,
            ),
            "/operations.v1.OperationsService/CreateHypervisor": grpclib.const.Handler(
                self.__rpc_create_hypervisor,
                grpclib.const.Cardinality.UNARY_STREAM,
                CreateHypervisorRequest,
                CreateHypervisorResponse,
            ),
            "/operations.v1.OperationsService/DestroyHypervisor": grpclib.const.Handler(
                self.__rpc_destroy_hypervisor,
                grpclib.const.Cardinality.UNARY_STREAM,
                DestroyHypervisorRequest,
                DestroyHypervisorResponse,
            ),
            "/operations.v1.OperationsService/ExpandStorage": grpclib.const.Handler(
                self.__rpc_expand_storage,
                grpclib.const.Cardinality.UNARY_STREAM,
                ExpandStorageRequest,
                ExpandStorageResponse,
            ),
            "/operations.v1.OperationsService/ShrinkStorage": grpclib.const.Handler(
                self.__rpc_shrink_storage,
                grpclib.const.Cardinality.UNARY_STREAM,
                ShrinkStorageRequest,
                ShrinkStorageResponse,
            ),
            "/operations.v1.OperationsService/CreateBackup": grpclib.const.Handler(
                self.__rpc_create_backup,
                grpclib.const.Cardinality.UNARY_STREAM,
                CreateBackupRequest,
                CreateBackupResponse,
            ),
        }
