syntax = "proto3";

package operations.v1;

// OperationsService is a service responsible for executing operations in the IsardVDI infrastructure
service OperationsService {
    // ListHypervisors returns a list with all the hypervisors and their resources
    rpc ListHypervisors(ListHypervisorsRequest) returns (ListHypervisorsResponse) {}
    // CreateHypervisor creates and adds a new hypervisor on the pool
    rpc CreateHypervisor(CreateHypervisorRequest) returns (stream CreateHypervisorResponse) {}
    // CreateHypervisors creates and adds multiple new hypervisor on the pool
    rpc CreateHypervisors(CreateHypervisorsRequest) returns (stream CreateHypervisorsResponse) {}
    // DestroyHypervisor destroys a Hypervisor. It doesn't stop / migrate the running VMs or anything like that
    rpc DestroyHypervisor(DestroyHypervisorRequest) returns (stream DestroyHypervisorResponse) {}
    // DestroyHypervisor destroys multiple Hypervisors. It doesn't stop / migrate the running VMs or anything like that
    rpc DestroyHypervisors(DestroyHypervisorsRequest) returns (stream DestroyHypervisorsResponse) {}
    
    // ExpandStorage adds more storage to the shared storage pool
    rpc ExpandStorage(ExpandStorageRequest) returns (stream ExpandStorageResponse) {}
    // ShrinkStorage removes storage from the shared storage pool
    rpc ShrinkStorage(ShrinkStorageRequest) returns (stream ShrinkStorageResponse) {}

    // CreateBackup creates a new backup of the storage pool
    rpc CreateBackup(CreateBackupRequest) returns (stream CreateBackupResponse) {}
}

// OperationState are the different states that a operation can be
enum OperationState {
    // default zero value
    OPERATION_STATE_UNSPECIFIED = 0;
    // OPERATION_STATE_SCHEDULED means that the operation is queued, and it's going to be ran when it's its time
    OPERATION_STATE_SCHEDULED = 1;
    // OPERATION_STATE_ACTIVE means that the operation is being executed
    OPERATION_STATE_ACTIVE = 2;
    // OPERATION_STATE_FAILED means the operation has failed
    OPERATION_STATE_FAILED = 3;
    // OPERATION_STATE_COMPLETED means the operation has finished successfully
    OPERATION_STATE_COMPLETED = 4;
}

// HypervisorCapabilites are the different capabilites that a hypervisor can have
enum HypervisorCapabilities {
    // default zero value
    HYPERVISOR_CAPABILITIES_UNSPECIFIED = 0;
    // HYPERVISOR_CAPABILITIES_STORAGE means the hypervisor has access to the shared storage pool
    HYPERVISOR_CAPABILITIES_STORAGE = 1;
    // HYPERVISOR_CAPABILITIES_GPU means the hypervisor has access to a GPU
    HYPERVISOR_CAPABILITIES_GPU = 2;
}

// HypervisorState are the different states that a operations hypervisor can be
enum HypervisorState {
    // default zero value
    HYPERVISOR_STATE_UNSPECIFIED =  0;
    // HYPERVISOR_STATE_UNKNOWN
    HYPERVISOR_STATE_UNKNOWN = 1;
    // HYPERVISOR_STATE_AVAILABLE_TO_CREATE means the hypervisor can be created
    HYPERVISOR_STATE_AVAILABLE_TO_CREATE = 2;
    // HYPERVISOR_STATE_AVAILABLE_TO_DESTROY means the hypervisor can be destroyed
    HYPERVISOR_STATE_AVAILABLE_TO_DESTROY = 3;
}

// HypervisorGPU is the representation of a GPU that an hypervisor can have
message HypervisorGPU {
    // Brand is the brand of the GPU. This is probably going to be 'NVIDIA'
    string brand = 1;
    // Model is the GPU model
    string model = 2;
}

// ListHypervisorsRequest is the request for the ListHypervisors method
message ListHypervisorsRequest {}

// ListHypervisorsResponse is the response for the ListHypervisors method
message ListHypervisorsResponse {
    // hypervisors contains all the hypervisors in the operations service
    repeated ListHypervisorsResponseHypervisor hypervisors = 1;
}

// ListHypervisorsResponseHypervisor is each hypervisor in the response of the ListHypervisors method
message ListHypervisorsResponseHypervisor {
    // id is the ID of the hypervisor
    string id = 1;

    // cpu is the number of CPU threads that the machine has
    int32 cpu = 2;

    // ram is the number of RAM that the machine has. It's in MB
    int32 ram = 3;

    // capabilities are the capabilities that the hypervisor has
    repeated HypervisorCapabilities capabilities = 4;

    // state is the state of the hypervisor
    HypervisorState state = 5;

    // gpus are all the gpus that the hypervisor has available. If there are GPUs, the HYPERVISOR_CAPABILITIES_GPU needs to be set
    repeated HypervisorGPU gpus = 6;
}

// CreateHypervisorRequest is the request for the CreateHypervisor method
message CreateHypervisorRequest {
    // id is the ID of the hypervisor
    string id = 1;
}

// CreateHypervisorResponse is the response for the CreateHypervisor method
message CreateHypervisorResponse {
    // state is the state of the operation
    OperationState state = 1;

    // msg contains info related with the operation
    string msg = 2;
}

// CreateHypervisorsRequest is the request for the CreateHypervisors method
message CreateHypervisorsRequest {
    // ids are the IDs of the hypervisors
    repeated string ids = 1;
}

// CreateHypervisorsResponse is the response for the CreateHypervisors method
message CreateHypervisorsResponse {
    // state is the state of the operation
    OperationState state = 1;

    // msg contains info related with the operation
    string msg = 2;
}

// DestroyHypervisorRequest is the request for the DestroyHypervisor method
message DestroyHypervisorRequest {
    // id is the ID of the hypervisor
    string id = 1;
}

// DestroyHypervisorResponse is the response for the DestroyHypervisor method
message DestroyHypervisorResponse {
    // state is the state of the operation
    OperationState state = 1;

    // msg contains info related with the operation
    string msg = 2;
}

// DestroyHypervisorsRequest is the request for the DestroyHypervisors method
message DestroyHypervisorsRequest {
    // ids are the ID of the hypervisors
    repeated string ids = 1;
}

// DestroyHypervisorsResponse is the response for the DestroyHypervisors method
message DestroyHypervisorsResponse {
    // state is the state of the operation
    OperationState state = 1;

    // msg contains info related with the operation
    string msg = 2;
}

// ExpandStorageRequest is the request for the ExpandStorage method
message ExpandStorageRequest {
    // min_bytes is the minimum number of bytes that the storage needs to be expanded
    int32 min_bytes = 1;
}

// ExpandStorageResponse is the response for the ExpandStorage method
message ExpandStorageResponse {
    // state is the state of the operation
    OperationState state = 1;

    // msg contains info related with the operation
    string msg = 2;
}

// ShrinkStorageRequest is the request for the ShrinkStorage method
message ShrinkStorageRequest {
    // max_bytes is the maximum number of bytes that the storage needs to be shrink
    int32 max_bytes = 1;
}

// ShrinkStorageResponse is the response for the ShrinkStorage method
message ShrinkStorageResponse {
    // state is the state of the operation
    OperationState state = 1;

    // msg contains info related with the operation
    string msg = 2;
}

// CreateBackupRequest is the request for the CreateBackup method
message CreateBackupRequest {}

// CreateBackupResponse is the response for the CreateBackup method
message CreateBackupResponse {
    // state is the state of the operation
    OperationState state = 1;

    // msg contains info related with the operation
    string msg = 2;
}
